---
import type {
  InternetResourcePageListing,
  InternetResourceType,
} from "@model/internetResource";
import type { CategoryPageData } from "@model/categoryPage";
import type { Population } from "@model/population";
import type { SanityImage } from "@model/image";

import { getCategoryPagesData, getPopulations } from "@common/client";
import { getFilteredTypesFromResources } from "@common/resourceType";
import { getResourcePageTitle } from "@common/page";

import MainLayout from "@layouts/MainLayout.astro";

import Container from "@ui/primitives/Container.astro";

import PageHeader from "@ui/PageHeader.astro";
import Heading from "@ui/primitives/Heading.astro";
import ResourceCounts, {
  type ResourceTypesCounts,
} from "@ui/ResourceCounts.astro";
import ResourcePageListings from "@ui/ResourcePageListing/ResourcePageListings.astro";

interface Props {
  categoryTitle: string;
  resources: Array<InternetResourcePageListing>;
  populationData: Population;
  applicableTypes: Array<InternetResourceType>;
  image: SanityImage | null;
}

export async function getStaticPaths() {
  const categoryPagesData = await getCategoryPagesData();
  const populations = await getPopulations();

  return categoryPagesData.flatMap((data: CategoryPageData) => {
    const filteredPopulations = populations.filter((p) =>
      data.resources.some((r) => r.populations?.includes(p.slug))
    );

    return filteredPopulations
      .map((population) => {
        const resources = data.resources.filter((r) =>
          r.populations?.includes(population.slug)
        );

        const filteredTypes = getFilteredTypesFromResources(resources);

        return {
          params: { category: data.slug, population: population.slug },
          props: {
            categoryTitle: data.title,
            image: data.image,
            populationData: population,
            resources,
            applicableTypes: filteredTypes ?? [],
          },
        };
      })
      .filter((pop) => pop.props.resources.length > 0);
  });
}

const params = Astro.params;
const props = Astro.props;

const fullCategoryTitle = props.categoryTitle;

const pageTitle = getResourcePageTitle({
  categoryName: fullCategoryTitle,
  populationName: props.populationData.name,
});

const resourceTypesCounts: ResourceTypesCounts = {};
props.applicableTypes.forEach(
  (t) =>
    (resourceTypesCounts[t] = props.resources.filter(
      (x) => x.type === t
    ).length)
);
---

<MainLayout>
  <PageHeader
    pageTitle={pageTitle}
    image={props.image ? props.image : undefined}
  />
  <Container>
    {
      props.applicableTypes.length > 1 && (
        <section class="p-3 lg:mb-6">
          <Heading as="h3" class:list={["mb-4 font-semibold"]}>
            {`Types of Resources for ${props.populationData.name} on This Topic`}
          </Heading>
          <ResourceCounts
            resourceTypesCounts={resourceTypesCounts}
            population={params.population}
            category={params.category}
          />
        </section>
      )
    }
    <section class="p-3 lg:mb-6">
      <ResourcePageListings resources={props.resources} />
    </section>
  </Container>
</MainLayout>
