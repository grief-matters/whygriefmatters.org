---
import type {
  InternetResourcePageListing,
  InternetResourceType,
} from "@model/internetResource";
import type { CategoryPageData } from "@model/categoryPage";
import type { Population } from "@model/population";
import type { SanityImage } from "@model/image";

import { getCategoryPagesData, getPopulations } from "@common/client";
import { getFilteredTypesFromResources } from "@common/resourceType";

import MainLayout from "@layouts/MainLayout.astro";
import ResourcePageLayout from "@layouts/ResourcePageLayout.astro";
import ResourcePageListing from "@ui/ResourcePageListing/ResourcePageListing.astro";
import ResourcePageListingsContainer from "@ui/ResourcePageListing/ResourcePageListingsContainer.astro";
import ResourcePageListingsListItem from "@ui/ResourcePageListing/ResourcePageListingsListItem.astro";
import PageHeader from "@ui/PageHeader.astro";
import { getResourcePageTitle } from "@common/page";
import MainNavLink from "@ui/MainNav/MainNavLink.astro";

interface Props {
  categoryTitle: string;
  resources: Array<InternetResourcePageListing>;
  populationData: Population;
  applicableTypes: Array<InternetResourceType>;
  image: SanityImage | null;
}

export async function getStaticPaths() {
  const categoryPagesData = await getCategoryPagesData();
  const populations = await getPopulations();

  return categoryPagesData.flatMap((data: CategoryPageData) => {
    const filteredPopulations = populations.filter((p) =>
      data.resources.some((r) => r.populations?.includes(p.slug))
    );

    return filteredPopulations
      .map((population) => {
        const resources = data.resources.filter((r) =>
          r.populations?.includes(population.slug)
        );

        const filteredTypes = getFilteredTypesFromResources(resources);

        return {
          params: { category: data.slug, population: population.slug },
          props: {
            categoryTitle: data.title,
            image: data.image,
            populationData: population,
            resources,
            applicableTypes: filteredTypes ?? [],
          },
        };
      })
      .filter((pop) => pop.props.resources.length > 0);
  });
}

const params = Astro.params;
const props = Astro.props;

const fullCategoryTitle = props.categoryTitle;

const pageTitle = getResourcePageTitle({
  categoryName: fullCategoryTitle,
  populationName: props.populationData.name,
});
---

<MainLayout>
  <ResourcePageLayout>
    <PageHeader
      slot="header"
      pageTitle={pageTitle}
      image={props.image ? props.image : undefined}
    />
    <section slot="section">
      <ResourcePageListingsContainer>
        {
          props.resources.map((resource) => (
            <ResourcePageListingsListItem>
              <ResourcePageListing resource={resource} />
            </ResourcePageListingsListItem>
          ))
        }
      </ResourcePageListingsContainer>
      <div class="mb-6">
        <MainNavLink
          href={`/${params.category}`}
          label={`Back to all resources in ${fullCategoryTitle}`}
          variant="secondary"
        />
      </div>
    </section>
  </ResourcePageLayout>
</MainLayout>
