---
import sortBy from "lodash/sortBy";
import differenceBy from "lodash/differenceBy";

import type {
  CategoryPageData,
  CategoryPageFeaturedResource,
} from "@model/categoryPage";
import type { Topic } from "@model/featuredContent";
import type { SanityImage } from "@model/image";
import {
  type InternetResourcePageListing,
  type InternetResourceType,
} from "@model/internetResource";
import type { Population } from "@model/population";

import { getCategoryPagesData, getPopulations } from "@common/client";
import { getFilteredTypesFromResources } from "@common/resourceType";
import { getResourcePageTitle } from "@common/page";
import { wgmDesignSystem as ds } from "@common/design-system";

import MainLayout from "@layouts/MainLayout.astro";

import Container from "@ui/primitives/Container.astro";
import EmphasizedEllipsisText from "@ui/primitives/EmphasizedEllipsisText.astro";
import Heading from "@ui/primitives/Heading.astro";

import CardLink from "@ui/CardLink.astro";
import FeaturedResources from "@ui/FeaturedResources.astro";
import MainNavRecursiveTopicTree from "@ui/MainNav/MainNavRecursiveTopicTree.astro";
import PageHeader from "@ui/PageHeader.astro";
import ResourceCounts, {
  type ResourceTypesCounts,
} from "@ui/ResourceCounts.astro";
import ResourcePageListings from "@ui/ResourcePageListing/ResourcePageListings.astro";
import TextBlock from "@ui/typography/TextBlock.astro";

type SubtopicResources = Record<
  string,
  {
    title: string;
    resources: Array<InternetResourcePageListing>;
  }
>;

interface Props {
  title: string;
  resources: Array<InternetResourcePageListing>;
  subtopicResources: SubtopicResources;
  featuredArticles: Array<CategoryPageFeaturedResource> | null;
  featuredStories: Array<CategoryPageFeaturedResource> | null;
  applicablePopulations: Array<Population>;
  applicableTypes: Array<InternetResourceType>;
  image: SanityImage | null;
  topic: Topic;
  subtopics: Array<Topic>;
}

export async function getStaticPaths() {
  const categoryPagesData = await getCategoryPagesData();
  const populations = await getPopulations();

  return categoryPagesData.map((data: CategoryPageData) => {
    const filteredPopulations = populations.filter((p) =>
      data.resources.some((r) => r.populations?.includes(p.slug))
    );

    const filteredTypes = getFilteredTypesFromResources(data.resources);

    // TODO - we need to fix titling so that we can distinguish between "{Loss of A} X" and "{Supporting} X"
    const fullTitle = data.title;

    const subtopicResources: SubtopicResources = {};

    data.subtopics?.forEach((t: Topic) => {
      const pageMatch = categoryPagesData.find((x) => x.slug === t.slug);
      if (typeof pageMatch === "undefined") {
        return;
      }

      subtopicResources[t.slug] = {
        title: pageMatch.title,
        resources: sortBy(pageMatch.resources, ["type", "title"]),
      };
    });

    const featuredArticles = data.featuredArticles ?? [];
    const featuredStories = data.featuredStories ?? [];
    const featuredResources = [...featuredArticles, ...featuredStories];

    const filteredResources = differenceBy(
      data.resources,
      featuredResources,
      "resourceUrl"
    );

    return {
      params: { category: data.slug },
      props: {
        title: fullTitle,
        image: data.image,
        resources: sortBy(filteredResources, ["type", "title"]),
        subtopicResources: subtopicResources,
        featuredArticles: data.featuredArticles,
        featuredStories: data.featuredStories,
        applicablePopulations: filteredPopulations ?? [],
        applicableTypes: filteredTypes.sort() ?? [],
        subtopics: data.subtopics,
      },
    };
  });
}

const params = Astro.params;
const props = Astro.props;

const pageTitle = getResourcePageTitle({
  categoryName: props.title,
});

const resourceTypesCounts: ResourceTypesCounts = {};
props.applicableTypes.forEach(
  (t) =>
    (resourceTypesCounts[t] = props.resources.filter(
      (x) => x.type === t
    ).length)
);

const showFeatured =
  Array.isArray(props.featuredStories) || Array.isArray(props.featuredArticles);
---

<MainLayout>
  <PageHeader
    pageTitle={pageTitle}
    image={props.image ? props.image : undefined}
  />
  <Container>
    {
      (props.subtopics ?? []).length > 0 && (
        <section class="m-3 p-4 sm:px-5 bg-white shadow-md">
          {props.subtopics.map((st: Topic) => (
            <MainNavRecursiveTopicTree topic={st} variant="secondary" />
          ))}
        </section>
      )
    }
    {
      props.applicableTypes.length > 1 && (
        <section class="p-3 lg:mb-6">
          <Heading as="h3" class:list={["mb-4 font-semibold"]}>
            {`Types of Resources on This Topic`}
          </Heading>
          <ResourceCounts
            resourceTypesCounts={resourceTypesCounts}
            category={params.category}
          />
        </section>
      )
    }
    {
      props.applicablePopulations.length > 0 && (
        <section class="p-3 mb-3 lg:mb-6">
          <Heading as="h3" class:list={["mb-4 font-semibold"]}>
            Underserved Groups
          </Heading>
          <TextBlock>{`We have identified resources within this topic for the following groups`}</TextBlock>
          <div class:list={["flex flex-wrap gap-4"]}>
            {props.applicablePopulations.map((population) => (
              <CardLink href={`/${params.category}/${population.slug}`}>
                {population.name}
              </CardLink>
            ))}
          </div>
        </section>
      )
    }
  </Container>
  {
    showFeatured && (
      <div
        class:list={[
          "[&>*:nth-child(odd)]:bg-stone-200",
          "[&>*:nth-child(even)]:bg-stone-100",
        ]}
      >
        {props.featuredArticles !== null && (
          <div>
            <Container size="lg">
              <section class="py-3">
                <Heading as="h2" size="xl2" class="text-center">
                  <EmphasizedEllipsisText text="Featured Articles" />
                </Heading>
                <FeaturedResources featuredResources={props.featuredArticles} />
              </section>
            </Container>
          </div>
        )}
        {props.featuredStories !== null && (
          <div>
            <Container size="lg">
              <section class="py-3">
                <Heading as="h2" size="xl2" class="text-center">
                  <EmphasizedEllipsisText text="Featured Stories" />
                </Heading>
                <FeaturedResources featuredResources={props.featuredStories} />
              </section>
            </Container>
          </div>
        )}
      </div>
    )
  }
  {
    props.resources.length > 0 && (
      <Container>
        <section class="p-3 lg:mb-6">
          <Heading
            as="h2"
            size="xl2"
            class:list={[
              "mb-6 font-semibold",
              ds.typography.color.primary.defaultLight,
            ]}
          >
            {"Resources On This Topic"}
          </Heading>
          <ResourcePageListings resources={props.resources} />
        </section>
      </Container>
    )
  }
</MainLayout>
