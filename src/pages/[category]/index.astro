---
import sortBy from "lodash/sortBy";

import type {
  CategoryPageData,
  CategoryPageFeaturedResource,
} from "@model/categoryPage";
import type { Topic } from "@model/featuredContent";
import type { SanityImage } from "@model/image";
import {
  type InternetResourcePageListing,
  type InternetResourceType,
} from "@model/internetResource";
import type { Population } from "@model/population";

import { getCategoryPagesData, getPopulations } from "@common/client";
import { getFilteredTypesFromResources } from "@common/resourceType";
import { getResourcePageTitle } from "@common/page";
import { wgmDesignSystem as ds } from "@common/design-system";

import MainLayout from "@layouts/MainLayout.astro";

import EmphasizedEllipsisText from "@ui/primitives/EmphasizedEllipsisText.astro";
import Heading from "@ui/primitives/Heading.astro";
import Text from "@ui/primitives/Text.astro";

import CardLink from "@ui/CardLink.astro";
import FeaturedResources from "@ui/FeaturedResources.astro";
import MainNavRecursiveTopicTree from "@ui/MainNav/MainNavRecursiveTopicTree.astro";
import PageHeader from "@ui/PageHeader.astro";
import ResourcePageLayout from "@layouts/ResourcePageLayout.astro";
import ResourceCounts, {
  type ResourceTypesCounts,
} from "@ui/ResourceCounts.astro";
import ResourcePageListings from "@ui/ResourcePageListing/ResourcePageListings.astro";

type SubtopicResources = Record<
  string,
  {
    title: string;
    resources: Array<InternetResourcePageListing>;
  }
>;

interface Props {
  title: string;
  resources: Array<InternetResourcePageListing>;
  subtopicResources: SubtopicResources;
  featuredArticles: Array<CategoryPageFeaturedResource> | null;
  featuredStories: Array<CategoryPageFeaturedResource> | null;
  applicablePopulations: Array<Population>;
  applicableTypes: Array<InternetResourceType>;
  image: SanityImage | null;
  topic: Topic;
  subtopics: any;
}

export async function getStaticPaths() {
  const categoryPagesData = await getCategoryPagesData();
  const populations = await getPopulations();

  return categoryPagesData.map((data: CategoryPageData) => {
    const filteredPopulations = populations.filter((p) =>
      data.resources.some((r) => r.populations?.includes(p.slug))
    );

    const filteredTypes = getFilteredTypesFromResources(data.resources);

    // TODO - we need to fix titling so that we can distinguish between "{Loss of A} X" and "{Supporting} X"
    const fullTitle = data.title;

    const subtopicResources: SubtopicResources = {};

    data.subtopics?.forEach((t: Topic) => {
      const pageMatch = categoryPagesData.find((x) => x.slug === t.slug);
      if (typeof pageMatch === "undefined") {
        return;
      }

      subtopicResources[t.slug] = {
        title: pageMatch.title,
        resources: sortBy(pageMatch.resources, ["type", "title"]),
      };
    });

    return {
      params: { category: data.slug },
      props: {
        title: fullTitle,
        image: data.image,
        resources: sortBy(data.resources, ["type", "title"]),
        subtopicResources: subtopicResources,
        featuredArticles: data.featuredArticles,
        featuredStories: data.featuredStories,
        applicablePopulations: filteredPopulations ?? [],
        applicableTypes: filteredTypes.sort() ?? [],
        subtopics: data.subtopics,
      },
    };
  });
}

const params = Astro.params;
const props = Astro.props;

const pageTitle = getResourcePageTitle({
  categoryName: props.title,
});

const resourceTypesCounts: ResourceTypesCounts = {};
props.applicableTypes.forEach(
  (t) =>
    (resourceTypesCounts[t] = props.resources.filter(
      (x) => x.type === t
    ).length)
);
---

<MainLayout>
  <ResourcePageLayout>
    <PageHeader
      slot="header"
      pageTitle={pageTitle}
      image={props.image ? props.image : undefined}
    />
    <Fragment slot="featured">
      {
        props.featuredArticles && (
          <div class="py-3">
            <div class="xl:container mx-auto">
              <div class="md:mx-6 xl:mx-9">
                <Heading as="h2" size="xl2" class="text-center py-3">
                  <EmphasizedEllipsisText text="Featured Articles" />
                </Heading>
                <FeaturedResources featuredResources={props.featuredArticles} />
              </div>
            </div>
          </div>
        )
      }
      {
        props.featuredStories && (
          <div class="py-3">
            <div class="xl:container mx-auto">
              <div class="xl:mx-9">
                <Heading as="h2" size="xl2" class="text-center py-3">
                  <EmphasizedEllipsisText text="Featured Stories" />
                </Heading>
                <FeaturedResources featuredResources={props.featuredStories} />
              </div>
            </div>
          </div>
        )
      }
    </Fragment>
    <div slot="section">
      {
        (props.subtopics ?? []).length > 0 && (
          <section class="m-3 p-4 sm:px-5 bg-white shadow-md">
            {props.subtopics.map((st: Topic) => (
              <MainNavRecursiveTopicTree topic={st} variant="secondary" />
            ))}
          </section>
        )
      }
      {
        props.applicableTypes.length > 1 && (
          <section class="p-3 mb-3 lg:mb-6">
            <ResourceCounts
              resourceTypesCounts={resourceTypesCounts}
              category={params.category}
            />
          </section>
        )
      }
      {
        props.applicablePopulations.length > 0 && (
          <section class="p-3 mb-3 lg:mb-6">
            <Heading as="h3" class:list={["mb-4 font-semibold"]}>
              Underserved Groups
            </Heading>
            <Text class="mb-3">{`We have identified resources within this topic for the following groups`}</Text>
            <div class:list={["flex flex-wrap gap-4"]}>
              {props.applicablePopulations.map((population) => (
                <CardLink href={`/${params.category}/${population.slug}`}>
                  {population.name}
                </CardLink>
              ))}
            </div>
          </section>
        )
      }
      <section class="p-3">
        {
          props.resources.length > 0 && (
            <>
              <Heading
                as="h2"
                size="xl2"
                class:list={[
                  "mb-6 font-semibold",
                  ds.typography.color.primary.defaultLight,
                ]}
              >
                {"Resources On This Topic"}
              </Heading>
              <ResourcePageListings resources={props.resources} />
            </>
          )
        }
      </section>
    </div>
  </ResourcePageLayout>
</MainLayout>
