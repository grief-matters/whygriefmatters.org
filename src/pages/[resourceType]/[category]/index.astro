---
import {
  type InternetResourcePageListing,
  internetResourceTypes,
} from "@model/internetResource";
import type { Population } from "@model/population";

import { getPopulations, getCategoryPagesData } from "@common/client";
import { getResourcePageTitle } from "@common/page";

import MainLayout from "@layouts/MainLayout.astro";
import ResourcePageLayout from "@layouts/ResourcePageLayout.astro";
import ResourcePageListing from "@ui/ResourcePageListing/ResourcePageListing.astro";
import ResourcePageListingsContainer from "@ui/ResourcePageListing/ResourcePageListingsContainer.astro";
import ResourcePageListingsListItem from "@ui/ResourcePageListing/ResourcePageListingsListItem.astro";
import PageHeader from "@ui/PageHeader.astro";
import type { SanityImage } from "@model/image";

interface Props {
  resources: Array<InternetResourcePageListing>;
  applicablePopulations: Array<Population>;
  categoryTitle: string;
  image: SanityImage | null;
}

export async function getStaticPaths() {
  const categoryPagesData = await getCategoryPagesData();
  const populations = await getPopulations();

  return internetResourceTypes.flatMap((resourceType) =>
    categoryPagesData
      .filter(
        (categoryPageData) =>
          categoryPageData.resources &&
          categoryPageData.resources.some(
            (resource) => resource.type === resourceType
          )
      )
      .map((catPage) => {
        const resourcesFilteredByType = catPage.resources.filter(
          (r) => r.type === resourceType
        );

        const filteredPopulations = populations.filter((p) =>
          resourcesFilteredByType.some((r) => r.populations?.includes(p.slug))
        );

        return {
          params: { category: catPage.slug, resourceType },
          props: {
            resources: resourcesFilteredByType,
            applicablePopulations: filteredPopulations,
            categoryTitle: catPage.title,
            image: catPage.image,
          },
        };
      })
  );
}

const params = Astro.params;
const props = Astro.props;

const fullCategoryTitle = props.categoryTitle;

const pageTitle = getResourcePageTitle({
  resourceType: params.resourceType,
  categoryName: fullCategoryTitle,
});
---

<MainLayout>
  <ResourcePageLayout>
    <PageHeader
      slot="header"
      pageTitle={pageTitle}
      image={props.image ? props.image : undefined}
    />
    <ResourcePageListingsContainer slot="section">
      <div class="p-3">
        {
          props.resources.map((resource) => (
            <ResourcePageListingsListItem>
              <ResourcePageListing resource={resource} />
            </ResourcePageListingsListItem>
          ))
        }
      </div>
    </ResourcePageListingsContainer>
  </ResourcePageLayout>
</MainLayout>
