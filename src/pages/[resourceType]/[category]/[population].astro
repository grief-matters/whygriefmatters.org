---
import {
  type InternetResourcePageListing,
  internetResourceTypes,
} from "@model/internetResource";

import { getPopulations, getCategoryPagesData } from "@common/client";

import MainLayout from "@layouts/MainLayout.astro";
import ResourcePageListing from "@ui/ResourcePageListing/ResourcePageListing.astro";
import ResourcePageListingsContainer from "@ui/ResourcePageListing/ResourcePageListingsContainer.astro";
import ResourcePageListingsListItem from "@ui/ResourcePageListing/ResourcePageListingsListItem.astro";
import ResourcePageLayout from "@layouts/ResourcePageLayout.astro";
import PageHeader from "@ui/PageHeader.astro";
import { getResourcePageTitle } from "@common/page";
import type { SanityImage } from "@model/image";

interface Props {
  resources: Array<InternetResourcePageListing>;
  categoryTitle: string;
  populationName: string;
  image: SanityImage | null;
}

export async function getStaticPaths() {
  const categoryPagesData = await getCategoryPagesData();
  const populations = await getPopulations();

  return internetResourceTypes.flatMap((resourceType) =>
    populations.flatMap((population) =>
      categoryPagesData
        .filter(
          (data) =>
            data.resources &&
            data.resources.some(
              (r) =>
                r.type === resourceType &&
                r.populations?.includes(population.slug)
            )
        )
        .map((data) => ({
          params: {
            category: data.slug,
            resourceType,
            population: population.slug,
          },
          props: {
            resources: data.resources.filter(
              (r) =>
                r.type === resourceType &&
                r.populations?.includes(population.slug)
            ),
            categoryTitle: data.title,
            populationName: population.name,
            image: data.image,
          },
        }))
    )
  );
}

const params = Astro.params;
const props = Astro.props;

const fullCategoryTitle = props.categoryTitle;

const pageTitle = getResourcePageTitle({
  categoryName: fullCategoryTitle,
  populationName: props.populationName,
  resourceType: params.resourceType,
});
---

<MainLayout>
  <ResourcePageLayout>
    <PageHeader
      slot="header"
      pageTitle={pageTitle}
      image={props.image ? props.image : undefined}
    />
    <ResourcePageListingsContainer slot="section">
      {
        props.resources.map((resource) => (
          <ResourcePageListingsListItem>
            <ResourcePageListing resource={resource} />
          </ResourcePageListingsListItem>
        ))
      }
    </ResourcePageListingsContainer>
  </ResourcePageLayout>
</MainLayout>
