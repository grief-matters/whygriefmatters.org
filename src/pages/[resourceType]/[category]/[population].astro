---
import {
  type InternetResourcePageListing,
  internetResourceTypes,
} from "@model/internetResource";
import type { SanityImage } from "@model/image";
import type { Topic } from "@model/topic";

import { getPopulations, getCategoryPagesData } from "@common/client";
import { getResourcePageTitle } from "@common/page";

import MainLayout from "@layouts/MainLayout.astro";

import PageHeader from "@ui/PageHeader.astro";
import ResourcePageListings from "@ui/ResourcePageListing/ResourcePageListings.astro";
import Container from "@ui/primitives/Container.astro";
import MainNavRecursiveTopicTree from "@ui/MainNav/MainNavRecursiveTopicTree.astro";

interface Props {
  resources: Array<InternetResourcePageListing>;
  categoryTitle: string;
  populationName: string;
  image: SanityImage | null;
  subtopics: Array<Topic>;
}

export async function getStaticPaths() {
  const categoryPagesData = await getCategoryPagesData();
  const populations = await getPopulations();

  return internetResourceTypes.flatMap((resourceType) =>
    populations.flatMap((population) =>
      categoryPagesData
        .filter(
          (data) =>
            data.resources &&
            data.resources.some(
              (r) =>
                r.type === resourceType &&
                r.populations?.includes(population.slug)
            )
        )
        .map((data) => ({
          params: {
            category: data.slug,
            resourceType,
            population: population.slug,
          },
          props: {
            resources: data.resources.filter(
              (r) =>
                r.type === resourceType &&
                r.populations?.includes(population.slug)
            ),
            categoryTitle: data.title,
            populationName: population.name,
            image: data.image,
            subtopics: data.subtopics,
          },
        }))
    )
  );
}

const params = Astro.params;
const props = Astro.props;

const fullCategoryTitle = props.categoryTitle;

const pageTitle = getResourcePageTitle({
  categoryName: fullCategoryTitle,
  populationName: props.populationName,
  resourceType: params.resourceType,
});
---

<MainLayout>
  <PageHeader
    slot="header"
    pageTitle={pageTitle}
    image={props.image ? props.image : undefined}
  />
  <Container>
    {
      (props.subtopics ?? []).length > 0 && (
        <section class="m-3 p-4 sm:px-5 bg-white shadow-md">
          {props.subtopics.map((st: Topic) => (
            <MainNavRecursiveTopicTree topic={st} variant="secondary" />
          ))}
        </section>
      )
    }
    <section class="p-3 lg:mb-6">
      <ResourcePageListings resources={props.resources} />
    </section>
  </Container>
</MainLayout>
