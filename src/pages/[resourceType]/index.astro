---
import pluralize from "pluralize";
import startCase from "lodash/startCase";
import sortBy from "lodash/sortBy";

import type {
  InternetResourcePageListing,
  InternetResourceType,
} from "@model/internetResource";
import type { Category } from "@model/category";
import type { Population } from "@model/population";

import Text from "@ui/primitives/Text.astro";

import {
  getCategoriesByFilter,
  getPopulations,
  getResourceTypePagesData,
} from "@common/client";

import MainLayout from "@layouts/MainLayout.astro";
import ResourcePageLayout from "@layouts/ResourcePageLayout.astro";

import { getResourcePageTitle } from "@common/page";
import PageHeader from "@ui/PageHeader.astro";
import Heading from "@ui/primitives/Heading.astro";
import MainNavLink from "@ui/MainNav/MainNavLink.astro";

interface Props {
  resources: Array<InternetResourcePageListing>;
  applicablePopulations: Array<Population>;
  applicableCategories: Array<Category>;
}

export async function getStaticPaths() {
  const resourceTypePagesData = await getResourceTypePagesData();
  const populations = await getPopulations();

  const pathPromises = Object.entries(resourceTypePagesData).map(
    async ([resourceType, resources]: [
      string,
      Array<InternetResourcePageListing>,
    ]) => {
      const filteredPopulations = populations.filter((p) =>
        resources.some((r) => r.populations?.includes(p.slug))
      );

      // This is less than ideal as means an additional request for each type
      const categoriesByFilter = await getCategoriesByFilter({ resourceType });

      return {
        params: { resourceType },
        props: {
          resources,
          applicablePopulations: filteredPopulations ?? [],
          applicableCategories:
            sortBy(categoriesByFilter, (s) => s.title) ?? [],
        },
      };
    }
  );

  const paths = await Promise.all(pathPromises);

  return paths.filter((x) => x.props.resources.length > 0);
}

const params = Astro.params;
const props = Astro.props;

const resourceTypeLabel = `${startCase(pluralize(params.resourceType))}`;

const pageTitle = getResourcePageTitle({
  resourceType: params.resourceType as InternetResourceType,
});

let quantityText;

switch (true) {
  case props.resources.length > 1000:
    quantityText = "over a thousand";
    break;
  case props.resources.length > 200:
    quantityText = "hundreds of";
    break;
  case props.resources.length > 24:
    quantityText = "dozens of";
    break;
  default:
    quantityText = "a range of";
    break;
}
---

<MainLayout>
  <ResourcePageLayout>
    <PageHeader slot="header" pageTitle={pageTitle} />
    <section slot="section" class="m-3 mb-12">
      <Text class="mb-3">
        {
          `We have collected together ${quantityText} ${resourceTypeLabel.toLowerCase()} spanning a range of topics.`
        }
      </Text>
      <Text class="mb-3">
        {
          `To see ${resourceTypeLabel.toLowerCase()} for a specific topic select from the list below.`
        }
      </Text>
      <Heading as="h3" class:list={["mb-3 font-semibold"]}>Topics</Heading>
      <ul class="p-3 lg:p-6 bg-white shadow-md sm:columns-2 lg:columns-3">
        {
          props.applicableCategories.map((category) => (
            <li>
              <MainNavLink
                href={`/${params.resourceType}/${category.slug}`}
                label={category.title}
                variant="secondary"
              />
            </li>
          ))
        }
      </ul>
    </section>
  </ResourcePageLayout>
</MainLayout>
