---
import pluralize from "pluralize";
import startCase from "lodash/startCase";

import { internetResourceTypes } from "@model/internetResource";
import type { ContentGroup } from "@model/contentGroup";

import { getResourceTypePagesData } from "@common/client";

import MainLayout from "@layouts/MainLayout.astro";

import PageHeader from "@ui/PageHeader.astro";
import Heading from "@ui/primitives/Heading.astro";
import Container from "@ui/primitives/Container.astro";
import PortableTextContentBlock from "@ui/typography/PortableTextContentBlock.astro";
import TopicHierarchyNav from "@ui/TopicHierarchyNav/TopicHierarchyNav.astro";
import Card from "@ui/primitives/Card.astro";
import Link from "@ui/primitives/LinkNew.astro";
import { getRouteFromDynamicResourcePageLink } from "@common/route";
import TextBlock from "@ui/typography/TextBlock.astro";

interface Props {
  headPartContentGroup: ContentGroup | null;
  templateContentGroup: ContentGroup;
}

export async function getStaticPaths() {
  const { commonTemplateData, headPartsByType } =
    await getResourceTypePagesData();

  return internetResourceTypes.map((resourceType) => {
    const props: Props = {
      headPartContentGroup: headPartsByType[resourceType] ?? null,
      templateContentGroup: commonTemplateData,
    };

    return {
      params: { resourceType },
      props,
    };
  });
}

const params = Astro.params;
const props = Astro.props;

const pageTitle =
  props.headPartContentGroup?.title ??
  `${
    params.resourceType === "peerSupport"
      ? startCase(params.resourceType)
      : startCase(pluralize(params.resourceType))
  }`;
---

<MainLayout>
  <PageHeader
    pageTitle={{
      title: pageTitle,
    }}
    image={props.headPartContentGroup?.image ?? undefined}
  />
  <Container>
    <section>
      {
        props.headPartContentGroup?.description && (
          <div class="m-3">
            <PortableTextContentBlock
              portableText={props.headPartContentGroup.description}
            />
          </div>
        )
      }
      {/* TODO - render out any blocks */}
    </section>
    <section>
      {/* TODO - render out any 'main' heading */}
      {
        props.templateContentGroup?.description && (
          <div class="m-3">
            <PortableTextContentBlock
              portableText={props.templateContentGroup.description}
            />
          </div>
        )
      }
      {
        props.templateContentGroup.blocks.map((block) => (
          <Card disableBorder additiveClasses={["m-3 pb-3"]}>
            <section class="p-4 sm:px-5 mb-3">
              {block.title && (
                <Heading as="h2" size="xl2" class:list={["mb-2"]}>
                  {block.title}
                </Heading>
              )}
              {block.description && <TextBlock>{block.description}</TextBlock>}
              {block.content.map((contentItem) => {
                switch (contentItem.contentType) {
                  case "topicContentBlock":
                    return (
                      <div class="mb-3">
                        <TopicHierarchyNav
                          topic={contentItem.topic}
                          filter={{ resourceType: params.resourceType }}
                        />
                      </div>
                    );
                  case "topicCollectionContentBlockNew":
                    return (
                      <div class="mb-3">
                        {contentItem.topics.map((t) => (
                          <div>
                            <TopicHierarchyNav
                              topic={t.topic}
                              filter={{ resourceType: params.resourceType }}
                            />
                          </div>
                        ))}
                      </div>
                    );
                  case "resourcePageLinks":
                    return (
                      <ul>
                        {contentItem.links.map((link) => (
                          <li>
                            <Link
                              classList={["inline-block mb-1"]}
                              href={
                                link.linkType === "resourcePageLink"
                                  ? getRouteFromDynamicResourcePageLink(link)
                                  : link.url
                              }
                            >
                              {link.label}
                            </Link>
                          </li>
                        ))}
                      </ul>
                    );
                  case "richTextContentBlock":
                    return (
                      <div class="mb-3">
                        <PortableTextContentBlock
                          portableText={contentItem.portableText}
                        />
                      </div>
                    );
                  default:
                    break;
                }
              })}
            </section>
          </Card>
        ))
      }
    </section>
  </Container>
</MainLayout>
