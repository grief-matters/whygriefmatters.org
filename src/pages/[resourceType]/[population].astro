---
import uniqBy from "lodash/uniqBy";

import type { Category } from "@model/category";
import type {
  InternetResourcePageListing,
  InternetResourceType,
} from "@model/internetResource";
import type { SanityImage } from "@model/image";

import { getPopulationPagesData } from "@common/client";

import MainLayout from "@layouts/MainLayout.astro";

import Container from "@ui/primitives/Container.astro";
import PageHeader from "@ui/PageHeader.astro";
import { getResourcePageTitle } from "@common/page";
import ResourcePageListings from "@ui/ResourcePageListing/ResourcePageListings.astro";

interface Props {
  populationName: string;
  image: SanityImage | null;
  resources: Array<InternetResourcePageListing>;
  applicableCategories: Array<Category>;
}

// getStaticPaths was broken so this is a pretty quick implementation
// ...could probs be optimised if builds slow down significantly when building these pages
export async function getStaticPaths() {
  const populationPagesData = await getPopulationPagesData();

  return populationPagesData.flatMap((pageData) => {
    // Array typed as any as 'categories' missing from type :(
    const resourcesByType: Record<InternetResourceType, Array<any>> = {
      app: [],
      article: [],
      blog: [],
      book: [],
      booklet: [],
      brochure: [],
      course: [],
      forum: [],
      memorial: [],
      peerSupport: [],
      podcast: [],
      podcastEpisode: [],
      story: [],
      supportGroup: [],
      therapyResource: [],
      video: [],
      webinar: [],
      website: [],
    };

    pageData.resources?.forEach((resource) => {
      resourcesByType[resource.type].push(resource);
    });

    const entries = Object.entries(resourcesByType).filter(
      ([_, resources]) => resources.length > 0
    );

    return entries.flatMap(([type, resources]) => {
      const applicableCategories = uniqBy(
        resources
          .filter((r) => r.categories !== null)
          .flatMap((r) => r.categories),
        "slug"
      );

      return {
        params: { resourceType: type, population: pageData.slug },
        props: {
          populationName: pageData.name,
          image: pageData.image,
          resources: resources,
          applicableCategories,
        },
      };
    });
  });
}

const params = Astro.params;
const props = Astro.props;

const pageTitle = getResourcePageTitle({
  populationName: props.populationName,
  resourceType: params.resourceType as InternetResourceType,
});
---

<MainLayout>
  <PageHeader pageTitle={pageTitle} image={props.image ?? undefined} />
  <Container>
    <section class="p-3 lg:mb-6">
      <ResourcePageListings resources={props.resources} />
    </section>
  </Container>
</MainLayout>
