---
import uniqBy from "lodash/uniqBy";

import {
  type InternetResourcePageListing,
  type InternetResourceType,
} from "@model/internetResource";
import type { Category } from "@model/category";
import type { SanityImage } from "@model/image";

import { getFilteredTypesFromResources } from "@common/resourceType";
import { getPopulationPagesData } from "@common/client";
import { getResourcePageTitle } from "@common/page";

import MainLayout from "@layouts/MainLayout.astro";
import ResourcePageLayout from "@layouts/ResourcePageLayout.astro";

import PageHeader from "@ui/PageHeader.astro";
import ResourcePageListings from "@ui/ResourcePageListing/ResourcePageListings.astro";
import ResourceCounts, {
  type ResourceTypesCounts,
} from "@ui/ResourceCounts.astro";

interface Props {
  populationName: string;
  image: SanityImage | null;
  resources: Array<InternetResourcePageListing>;
  applicableTypes: Array<InternetResourceType>;
  applicableCategories: Array<Category>;
}

export async function getStaticPaths() {
  const populationPagesData = await getPopulationPagesData();

  return populationPagesData.flatMap((pageData) => {
    const applicableCategories =
      uniqBy(
        pageData.resources?.flatMap((r) => r.categories),
        "slug"
      ).filter((x) => x !== null) ?? [];

    const applicableTypes = getFilteredTypesFromResources(
      pageData.resources ?? []
    );

    return {
      params: { population: pageData.slug },
      props: {
        populationName: pageData.name,
        image: pageData.image,
        resources: pageData.resources,
        applicableCategories,
        applicableTypes,
      },
    };
  });
}

const params = Astro.params;
const props = Astro.props;

const pageTitle = getResourcePageTitle({
  populationName: props.populationName,
});

const resourceTypesCounts: ResourceTypesCounts = {};
props.applicableTypes.forEach(
  (t) =>
    (resourceTypesCounts[t] = props.resources.filter(
      (x) => x.type === t
    ).length)
);
---

<MainLayout>
  <ResourcePageLayout>
    <PageHeader
      slot="header"
      pageTitle={pageTitle}
      image={props.image ?? undefined}
    />
    <Fragment slot="section">
      {
        props.applicableTypes.length > 1 && (
          <section class="p-3 mb-3 lg:mb-6">
            <ResourceCounts
              resourceTypesCounts={resourceTypesCounts}
              population={params.population}
            />
          </section>
        )
      }
      <section class="p-3">
        <ResourcePageListings resources={props.resources} />
      </section>
    </Fragment>
  </ResourcePageLayout>
</MainLayout>
