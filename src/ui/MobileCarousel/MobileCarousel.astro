---
interface Props {}
---

<mobile-carousel>
  <div class="w-full overflow-hidden">
    <!-- outer grid here? -->
    <div
      class:list={[
        "items-container",
        "flex xl:max-w-screen-2xl xl:mx-auto",
        "overflow-x-auto snap-mandatory snap-x scroll-smooth",
      ]}
    >
      <slot name="items" />
    </div>
    <div
      class:list={[
        "controls",
        "flex justify-center space-x-2 pt-3",
        "lg:hidden",
      ]}
    >
      <slot name="controls" />
    </div>
  </div>
</mobile-carousel>

<script>
  class MobileCarousel extends HTMLElement {

    activeSlideIndex: number;
    slides: HTMLElement[];
    controls: HTMLElement[];
    container: HTMLElement | null;

    constructor() {
      super();
      this.activeSlideIndex = 0;
      this.slides = [];
      this.controls = [];
      this.container = null;
    }

    connectedCallback() {
      this.container = this.querySelector(".items-container");
      this.slides = Array.from(this.querySelectorAll(".carousel-item"));
      this.controls = Array.from(this.querySelectorAll(".carousel-control"));

      if (this.container) {
        this.container.addEventListener("scroll", this.handleScroll.bind(this));
      }

      this.updateActiveSlide(); // Initialize active slide
    }

    handleScroll() {
      const scrollLeft = this.container ? this.container.scrollLeft : 0;
      const slideWidth = this.slides[0].offsetWidth;

      console.log(scrollLeft);

      const index = Math.round(scrollLeft / slideWidth);
      if (index !== this.activeSlideIndex) {
        this.activeSlideIndex = index;
        this.updateActiveSlide();
      }
    }

    updateActiveSlide() {
      // Update styles for controls
      this.controls.forEach((control, idx) => {
        if (idx === this.activeSlideIndex) {
          control.classList.add("active");
        } else {
          control.classList.remove("active");
        }
      });
    }
  }

  customElements.define("mobile-carousel", MobileCarousel);
</script>
