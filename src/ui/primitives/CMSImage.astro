---
import sample from "lodash/sample";
import { getFallbackImageCollection, getImageUrlBuilder } from "@common/client";
import type { SanityImage } from "@model/image";

interface Props {
  image: SanityImage | string;
  altText?: string;
  classList?: Array<string>;
  maxWidth?: number;
  priority?: boolean;
}

const props = Astro.props;

let sanityImage;
let alt;
let isSanity = false;

if (typeof props.image === 'string') {
  sanityImage = props.image;
  alt = props.altText ?? "Image";
  isSanity = false;
} else if (props.image?.image) {
  sanityImage = props.image.image;
  alt = props.image.altText ?? "Image";
  isSanity = true;
} else {
  const fallbacks = await getFallbackImageCollection();
  const fallbackImage = sample(fallbacks) as SanityImage;
  sanityImage = fallbackImage.image;
  alt = fallbackImage.altText ?? "Fallback image";
  isSanity = true;
}

const allWidths = [320, 480, 640, 768, 1024, 1280, 1536, 2048, 2500];
const maxWidth = props.maxWidth && props.maxWidth >= 320 ? props.maxWidth : 2500;
const selectedWidths = allWidths.filter(w => w <= maxWidth);

let webpSources: string[] = [];
let fallbackSrc = '';

if (isSanity) {
  webpSources = selectedWidths.map(width => 
    getImageUrlBuilder(sanityImage).width(width).format("webp").url()
  ).reverse();
  fallbackSrc = getImageUrlBuilder(sanityImage).width(maxWidth).url();
} else {
  fallbackSrc = String(sanityImage);
}
---
<picture>
  {isSanity && webpSources.map((webpSource, i) => (
    <source 
      type="image/webp"
      media={`(min-width: ${selectedWidths[selectedWidths.length - 1 - i]}px)`}
      srcset={webpSource}
    />
  ))}
  <img 
    src={fallbackSrc} 
    alt={alt}
    class:list={props.classList}
    loading={props.priority ? "eager" : "lazy"}
    decoding="async"
    style="width: 100%; height: auto;"
  />
</picture>
