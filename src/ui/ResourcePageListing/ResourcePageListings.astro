---
import pluralize from "pluralize";
import sortBy from "lodash/sortBy";
import startCase from "lodash/startCase";

import {
  internetResourceTypes,
  type InternetResourcePageListing,
  type InternetResourceType,
} from "@model/internetResource";

import Heading from "@ui/primitives/Heading.astro";

import ResourcePageListing from "./ResourcePageListing.astro";
import ResourcePageListingsContainer from "./ResourcePageListingsContainer.astro";
import ResourcePageListingsListItem from "./ResourcePageListingsListItem.astro";

type ResourcesRecord = Record<
  InternetResourceType,
  Array<InternetResourcePageListing>
>;

interface Props {
  resources: Array<InternetResourcePageListing>;
}

const props = Astro.props;

const resources: Partial<ResourcesRecord> = {};
props.resources?.forEach((r) => {
  if (typeof resources[r.type] === "undefined") {
    resources[r.type] = [];
  }

  resources[r.type]?.push(r);
});

const resourcesRecordEntries = Object.entries(resources).sort(([a], [b]) => {
  const idxA = internetResourceTypes.indexOf(a as InternetResourceType);
  const idxB = internetResourceTypes.indexOf(b as InternetResourceType);
  return idxA - idxB;
});
---

{
  resourcesRecordEntries.map(([resourceType, resourceSet]) => (
    <>
      <Heading
        as="h3"
        size="xl2"
        class:list={[
          "font-medium text-sky-800/50",
          "my-3 sm:mb-4",
          "underline decoration-sky-800/10 underline-offset-4",
        ]}
      >
        {startCase(pluralize(resourceType))}
      </Heading>
      <ResourcePageListingsContainer>
        {sortBy(resourceSet, ["lastUpdated"])
          .reverse()
          .map((resource) => (
            <ResourcePageListingsListItem>
              <ResourcePageListing resource={resource} />
            </ResourcePageListingsListItem>
          ))}
      </ResourcePageListingsContainer>
    </>
  ))
}
