---
import type { ContentBlock } from "@model/contentBlock";

import { getImageUrlBuilder } from "@common/client";
import { getRouteFromDynamicResourcePageLink } from "@common/route";

import CardLink from "./CardLink.astro";
import CardLinkListContainer from "./CardLinkListContainer.astro";
import EmphasizedEllipsisText from "./primitives/EmphasizedEllipsisText.astro";
import FeaturedCrisisResource from "./composites/FeaturedCrisisResource.astro";
import Heading from "./primitives/Heading.astro";
import Link from "./primitives/Link.astro";
import PortableTextContentBlock from "./typography/PortableTextContentBlock.astro";
import TopicCollectionContentBlock from "./TopicCollectionContentBlock.astro";
import ImageRow from "./ImageRow.astro";
import FormRenderer from "./FormRenderer.astro";
import PersonGroupBlock from "./PersonGroupBlock.astro";
import CMSImage from "./primitives/CMSImage.astro";

interface Props {
  contentBlock: ContentBlock;
}

const { contentBlock } = Astro.props;
---

{
  contentBlock.title && (
    <Heading as="h2" size="xl2" class:list={["mb-3 text-center"]}>
      {contentBlock.title}
    </Heading>
  )
}
{
  contentBlock.content.map((contentItem) => {
    switch (contentItem.contentType) {
      case "accessibleImage":
        return (
          <div class="p-3">
            <CMSImage image={contentItem} priority={true} maxWidth={640} />
          </div>
        );
      case "featuredCrisisResource":
        return (
          <div class="pb-6">
            <FeaturedCrisisResource
              crisisResource={contentItem.resource}
              showLogo={contentItem.showImage ?? false}
            />
          </div>
        );
      case "featuredResource":
        return <div />;
      case "personGroupBlock":
        return (
          <PersonGroupBlock
            featured={contentItem.featured}
            personGroup={contentItem.group}
            showGroupName={contentItem.showName}
            showGroupDescription={contentItem.showDescription}
          />
        );
      case "relativeLink":
        return (
          <div class="mx-auto text-center pt-6 pb-3">
            <Link href={contentItem.url} size="xl">
              <EmphasizedEllipsisText text={contentItem.label} />
            </Link>
          </div>
        );
      case "resourceLinks":
        return (
          <div class:list={["flex flex-wrap justify-center gap-4", "p-3"]}>
            {contentItem.resources.map((link) => (
              <CardLink
                href={link.url}
                cardProps={{
                  resourceType: link.type ?? undefined,
                }}
                external
              >
                {link.title}
              </CardLink>
            ))}
          </div>
        );
      case "resourcePageLinks":
        return (
          <CardLinkListContainer>
            {contentItem.links.map((pageLink) => (
              <CardLink
                href={
                  pageLink.linkType === "resourcePageLink"
                    ? getRouteFromDynamicResourcePageLink(pageLink)
                    : pageLink.url
                }
              >
                {pageLink.label}
              </CardLink>
            ))}
          </CardLinkListContainer>
        );
      case "richTextContentBlock":
        return (
          <PortableTextContentBlock portableText={contentItem.portableText} />
        );
      case "imageRow":
        return (
          <div class:list={["mb-6 px-3"]}>
            <ImageRow images={contentItem.images} />
          </div>
        );
      case "rowOfThreeFeaturedResources":
        return <div />;
      case "topicCollectionContentBlockNew":
        return (
          <div class="mx-3">
            <TopicCollectionContentBlock topics={contentItem.topics} />
          </div>
        );
      case "topicContentBlock":
        return <div />;
      case "form":
        return (
          <div class:list={["p-3 sm:max-w-xl sm:mx-auto"]}>
            <FormRenderer form={contentItem} />
          </div>
        );
    }
  })
}
