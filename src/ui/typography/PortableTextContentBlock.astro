---
import sanitizeHtml from "sanitize-html";
import { toHTML } from "@portabletext/to-html";

import type { PortableText } from "@model/portableText";

import {
  type BaseTextBlockProps,
  getTextBlockClassList,
  stylableTextBlockElements,
} from "./helpers";

type Props = BaseTextBlockProps & {
  portableText: PortableText;
};

const { variant = "default", ...props } = Astro.props;

const [_, ...marks] = stylableTextBlockElements;

const htmlString = toHTML(props.portableText, {
  components: {
    block: ({ children }) =>
      `<p class="${getTextBlockClassList(
        "p",
        props.resetBaseClassLists?.p,
        props.stylableElementClassLists?.p,
        variant
      )}">${children}</p>`,
    marks: Object.fromEntries(
      marks.map((el) => [
        el,
        ({ children }) =>
          `<${el} class="${getTextBlockClassList(
            el,
            props.resetBaseClassLists?.[el],
            props.stylableElementClassLists?.[el],
            variant
          )}">${children}</${el}>`,
      ])
    ),
    hardBreak: false,
  },
});

const safeHtmlString = sanitizeHtml(htmlString, {
  allowedAttributes: Object.fromEntries(
    stylableTextBlockElements.map((el) => [el, ["class"]])
  ),
});
---

<Fragment set:html={safeHtmlString} />
