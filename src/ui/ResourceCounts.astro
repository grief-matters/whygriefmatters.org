---
import startCase from "lodash/startCase";
import partition from "lodash/partition";
import pluralize from "pluralize";

import {
  internetResourceTypes,
  primaryResourceTypes,
  type InternetResourceType,
  type PrimaryInternetResourceType,
} from "@model/internetResource";
import CardLink from "./CardLink.astro";
import { getRouteFromDynamicResourcePageLink } from "@common/route";
import TextBlock from "./typography/TextBlock.astro";

export type ResourceTypesCounts = Partial<Record<InternetResourceType, number>>;

interface Props {
  resourceTypesCounts: ResourceTypesCounts;
  population?: string;
  category?: string;
}

const props = Astro.props;

const [primary, secondary]: [InternetResourceType[], InternetResourceType[]] =
  partition(
    Object.keys(props.resourceTypesCounts) as InternetResourceType[],
    (k) => primaryResourceTypes.includes(k as PrimaryInternetResourceType)
  );

const sortFn = (a: InternetResourceType, b: InternetResourceType) => {
  const idxA = internetResourceTypes.indexOf(a);
  const idxB = internetResourceTypes.indexOf(b);
  return idxA - idxB;
};
---

<Fragment>
  {
    primary.length > 0 && (
      <>
        <TextBlock>{"Primary resources"}</TextBlock>
        <div class:list={["flex flex-wrap gap-4 mb-3"]}>
          {primary.sort(sortFn).map((resourceType) => (
            <CardLink
              href={getRouteFromDynamicResourcePageLink({
                category: props.category ?? null,
                population: props.population ?? null,
                type: resourceType,
              })}
              cardProps={{ resourceType: resourceType ?? undefined }}
            >
              <span class="flex space-x-2">
                <span>
                  {resourceType === "peerSupport"
                    ? startCase(resourceType)
                    : pluralize(startCase(resourceType))}
                </span>
                <span>{props.resourceTypesCounts[resourceType]}</span>
              </span>
            </CardLink>
          ))}
        </div>
      </>
    )
  }
  {
    secondary.length > 0 && (
      <>
        <TextBlock>{"Explore more options"}</TextBlock>
        <div class:list={["flex flex-wrap gap-4 mb-3"]}>
          {secondary.map((resourceType) => (
            <CardLink
              href={getRouteFromDynamicResourcePageLink({
                category: props.category ?? null,
                population: props.population ?? null,
                type: resourceType,
              })}
              cardProps={{ resourceType: resourceType ?? undefined }}
            >
              <span class="flex space-x-2">
                <span>{pluralize(startCase(resourceType))}</span>
                <span>{props.resourceTypesCounts[resourceType]}</span>
              </span>
            </CardLink>
          ))}
        </div>
      </>
    )
  }
</Fragment>
