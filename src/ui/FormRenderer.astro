---
import type { Form } from "@model/contentBlock";
import Heading from "./primitives/Heading.astro";
import TextBlock from "./typography/TextBlock.astro";
import FormFieldLabel from "./FormFieldLabel.astro";

interface Props {
  form: Form;
}

const { form } = Astro.props;

const baseInputClasses = [
  "block w-full px-3 py-1 mt-2",
  "border-1 border-stone-200 rounded-sm",
  "focus:outline-blue-500/75",
  "font-ng",
];
---

<cms-form data-submit-action={form.submitAction}>
  {form.title && <Heading class:list={["mb-3"]}>{form.title}</Heading>}
  {form.description && <TextBlock>{form.description}</TextBlock>}
  <form id="cms-form">
    {
      form.fields.map((f) => (
        <div class="mb-4">
          {() => {
            switch (f.type) {
              case "textarea":
                return (
                  <>
                    <FormFieldLabel
                      fieldName={f.name}
                      label={f.label}
                      description={f.description ?? undefined}
                      required={f.required}
                    />
                    <textarea
                      name={f.name}
                      rows="3"
                      class:list={baseInputClasses}
                    />
                  </>
                );
              case "select":
                return (
                  <>
                    <FormFieldLabel
                      fieldName={f.name}
                      label={f.label}
                      description={f.description ?? undefined}
                      required={f.required}
                    />
                    <select
                      name={f.name}
                      id={f.name}
                      class:list={baseInputClasses}
                    >
                      {f.required && (
                        <option value="">{"Select an option"}</option>
                      )}
                      {f.inputOptions.map((o) => (
                        <option value={o}>{o}</option>
                      ))}
                    </select>
                  </>
                );
              case "radio":
                return (
                  <fieldset>
                    <legend
                      class:list={[
                        "block",
                        {
                          "after:content-['*'] after:text-pink-500 after:-ml-0.5":
                            f.required,
                        },
                      ]}
                    >
                      {f.label}
                    </legend>
                    {f.inputOptions.map((o) => (
                      <div>
                        <input type="radio" id={o} name={o} value={o} />
                        <label for={o}>{o}</label>
                      </div>
                    ))}
                  </fieldset>
                );
              default:
                return (
                  <>
                    <FormFieldLabel
                      fieldName={f.name}
                      label={f.label}
                      description={f.description ?? undefined}
                      required={f.required}
                    />
                    <input
                      class:list={baseInputClasses}
                      type={f.type}
                      name={f.name}
                      id={f.name}
                    />
                  </>
                );
            }
          }}
        </div>
      ))
    }
    <button
      class:list={[
        "hover:shadow-md hover:shadow-blue-800/30 transition duration-300",
        "bg-blue-900",
        "text-start px-3",
        "rounded",
        "sm:w-full sm:text-center sm:py-1",
        "text-stone-50 font-medium",
        "disabled:bg-blue-900/50",
      ]}
      type="submit">{"Submit"}</button
    >
  </form>
</cms-form>

<script>
  import { actions } from "astro:actions";

  class CmsForm extends HTMLElement {
    connectedCallback() {
      const form = document.querySelector("form");
      const button = document.querySelector('button[type="submit"]');

      const handler = this.dataset.submitAction;
      if (typeof handler === "undefined") {
        // TODO - handle
        return;
      }

      form?.addEventListener("submit", async (e) => {
        button?.setAttribute("disabled", "true");

        e.preventDefault();
        const formData = new FormData(form);

        const action = actions[handler as keyof typeof actions];
        if (typeof action === "undefined") {
          // TODO - handle
          return;
        }

        const { error } = await action(formData);

        form.reset();
        button?.removeAttribute("disabled");
        if (!error) {
          console.log("Submitted yay!");
        }
      });
    }
  }

  customElements.define("cms-form", CmsForm);
</script>
