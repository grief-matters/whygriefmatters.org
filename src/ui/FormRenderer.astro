---
import type { Form } from "@model/contentBlock";
import Heading from "./primitives/Heading.astro";
import TextBlock from "./typography/TextBlock.astro";
import FormFieldLabel from "./FormFieldLabel.astro";

interface Props {
  form: Form;
}

const { form } = Astro.props;

const baseInputClasses = [
  "block w-full px-3 py-1 mt-2",
  "border border-stone-200 rounded-sm",
  "focus:outline-blue-500/75",
  "font-ng",
  "form-input",
];
---

<cms-form data-submit-action={form.submitAction}>
  {form.title && <Heading class:list={["mb-3"]}>{form.title}</Heading>}
  {form.description && <TextBlock>{form.description}</TextBlock>}
  <form id="cms-form" novalidate>
    <div class="hidden">
      {/* Honeypot Field */}
      <label for="referralSource">How Did You Hear About Us?</label>
      <input
        id="referralSource"
        name="referralSource"
        type="text"
        tabindex="-1"
        autocomplete="off"
      />
    </div>
    {
      form.fields.map((f) => (
        <div class="mb-4">
          {() => {
            switch (f.type) {
              case "textarea":
                return (
                  <>
                    <FormFieldLabel
                      fieldName={f.name}
                      label={f.label}
                      description={f.description ?? undefined}
                      required={f.required}
                    />
                    <textarea
                      id={f.name}
                      name={f.name}
                      rows="5"
                      class:list={baseInputClasses}
                    />
                  </>
                );
              case "select":
                return (
                  <>
                    <FormFieldLabel
                      fieldName={f.name}
                      label={f.label}
                      description={f.description ?? undefined}
                      required={f.required}
                    />
                    <select
                      name={f.name}
                      id={f.name}
                      class:list={baseInputClasses}
                    >
                      {f.required && (
                        <option value="">{"Select an option"}</option>
                      )}
                      {f.inputOptions.map((o) => (
                        <option value={o}>{o}</option>
                      ))}
                    </select>
                  </>
                );
              case "radio":
                // TODO - not being used yet - but not finished
                return (
                  <fieldset>
                    <legend
                      class:list={[
                        "block",
                        {
                          "after:content-['*'] after:text-pink-500 after:-ml-0.5":
                            f.required,
                        },
                      ]}
                    >
                      {f.label}
                    </legend>
                    {f.inputOptions.map((o) => (
                      <div>
                        <input type="radio" id={o} name={o} value={o} />
                        <label for={o}>{o}</label>
                      </div>
                    ))}
                  </fieldset>
                );
              default:
                return (
                  <>
                    <FormFieldLabel
                      fieldName={f.name}
                      label={f.label}
                      description={f.description ?? undefined}
                      required={f.required}
                    />
                    <input
                      class:list={baseInputClasses}
                      type={f.type}
                      name={f.name}
                      id={f.name}
                    />
                  </>
                );
            }
          }}
        </div>
      ))
    }
    <button
      class:list={[
        "hover:shadow-md hover:shadow-blue-800/30 transition duration-300",
        "bg-blue-900",
        "text-start px-3",
        "rounded",
        "sm:w-full sm:text-center sm:py-1",
        "text-stone-50 font-medium",
        "disabled:bg-blue-900/50",
      ]}
      type="submit">{"Submit"}</button
    >
  </form>
</cms-form>

<script>
  import { actions } from "astro:actions";
  import { inputSchemaMap } from "@common/input-schema-map";
  import { isActionKey, type ActionKey } from "@common/action-keys";

  import type { ZodSchema } from "astro:schema";
  type Action = (formData: any) => Promise<any>;

  class CmsForm extends HTMLElement {
    private action: Action | null = null;
    private validator: ZodSchema<any> | null = null;
    private validationResults: Record<string, string> = {};
    private form: HTMLFormElement | null = null;
    private submitButton: Element | null = null;

    private fieldBorderClassList = ["border", "border-stone-200"];
    private fieldErrorBorderClassList = ["border-2", "border-pink-500"];

    constructor() {
      super();
    }

    connectedCallback() {
      this.initialize();

      if (this.action === null) {
        // todo - set an error on the form
        return;
      }
    }

    private initialize() {
      const key = this.getActionKeyOrNull();
      const action = key ? this.getActionOrNull(key) : null;
      const validator = key ? this.getValidatorOrNull(key) : null;

      const form = document.querySelector("form");
      const button = document.querySelector('button[type="submit"]');

      this.action = action;
      this.validator = validator;
      this.form = form;
      this.submitButton = button;

      this.setupFormListener();
    }

    private getActionKeyOrNull() {
      const key = this.dataset.submitAction;
      return isActionKey(key) ? key : null;
    }

    private getActionOrNull(actionKey: ActionKey) {
      return actions[actionKey] ?? null;
    }

    private getValidatorOrNull(actionKey: ActionKey) {
      return inputSchemaMap[actionKey] ?? null;
    }

    private setupFormListener() {
      this.form?.addEventListener("submit", async (e) => {
        e.preventDefault();

        this.clearValidation();

        if (!this.form || !this.submitButton) {
          console.error("[CmsForm] could not get form elements");
          return;
        }

        this.submitButton?.setAttribute("disabled", "true");

        const formData = new FormData(this.form);

        if (!formData) {
          console.error("[CmsForm] could not get 'formData'");
        }

        const formEntries = Object.fromEntries(formData.entries());

        const { success, data } = this.validate(formEntries);
        if (!success) {
          // todo - set form level error
          this.displayValidationErrors();
          this.submitButton.removeAttribute("disabled");
          return;
        }

        const { error } = await this.action?.(data);

        if (!error) {
          this.form.reset();
          // todo - set confirmation message
        }

        this.submitButton.removeAttribute("disabled");
      });
    }

    private validate(dataToValidate: any) {
      if (!this.validator) {
        console.error("[CmsForm] no validator set");
        return { success: true, data: dataToValidate };
      }

      const { success, data, error } = this.validator.safeParse(dataToValidate);
      if (!success) {
        const fieldErrors = Object.entries(error.flatten().fieldErrors);

        for (let i = 0; i < fieldErrors.length; i++) {
          const [fieldName, errors] = fieldErrors[i];
          this.validationResults[fieldName] = errors?.join(", ") ?? "Invalid";
        }
      }

      return { success, data };
    }

    private displayValidationErrors() {
      if (!this.form) {
        console.error(
          "[CmsForm] cannot get form elements to 'displayValidationErrors'"
        );
        return;
      }

      const formElements = this.form.elements;

      if (Object.keys(this.validationResults).length > 0) {
        Object.entries(this.validationResults).forEach(
          ([fieldId, errorMessage]) => {
            const input = formElements.namedItem(fieldId) as Element;
            if (input) {
              input.classList.remove(...this.fieldBorderClassList);
              input.classList.add(...this.fieldErrorBorderClassList);

              const errorElement =
                this.createValidationErrorElement(errorMessage);

              input.parentNode?.insertBefore(errorElement, input.nextSibling);
            }
          }
        );
      }
    }

    private createValidationErrorElement(errorMessage: string) {
      let newElement = document.createElement("p");
      newElement.classList.add(
        "validation-error",
        "text-sm",
        "text-pink-500",
        "pt-2"
      );
      newElement.textContent = errorMessage;
      return newElement;
    }

    private clearValidation() {
      const formElements = this.form?.elements;
      if (!formElements) {
        console.error(
          "[CmsForm] cannot get form elements in 'clearValidation'"
        );
      }

      Object.keys(this.validationResults).forEach((fieldName) => {
        // todo - deal with RadioNodeList
        const input = (formElements?.namedItem(fieldName) as Element) ?? null;
        if (input) {
          input.classList.remove(...this.fieldErrorBorderClassList);
          input.classList.add(...this.fieldBorderClassList);
        }
      });

      this.validationResults = {};
      const currentErrorElements = this.querySelectorAll(".validation-error");
      currentErrorElements.forEach((el) => el.remove());
    }
  }

  customElements.define("cms-form", CmsForm);
</script>
