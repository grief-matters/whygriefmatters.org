---
import type { Form } from "@model/contentBlock";
import Heading from "./primitives/Heading.astro";
import TextBlock from "./typography/TextBlock.astro";

interface Props {
  form: Form;
}

const { form } = Astro.props;

const baseInputClasses = [
  "block w-full px-3 py-1 mt-2",
  "border-1 border-stone-200 rounded-sm",
  "focus:outline-blue-500/75",
  "font-ng",
];
---

<div>
  {form.title && <Heading class:list={["mb-3"]}>{form.title}</Heading>}
  {form.description && <TextBlock>{form.description}</TextBlock>}
  <form>
    {
      form.fields.map((f) => (
        <div class="mb-4">
          <label
            class:list={[
              "block",
              {
                "after:content-['*'] after:text-pink-500 after:-ml-0.5":
                  f.required,
              },
            ]}
            for={f.name}
          >
            {f.label}
            {f.required && <span class="sr-only">{"(required)"}</span>}
          </label>
          {f.description && <p class="font-sans text-sm">{f.description}</p>}
          {() => {
            switch (f.type) {
              case "textarea":
                return <textarea rows="3" class:list={baseInputClasses} />;
              case "select":
                return (
                  <select
                    name={f.name}
                    id={f.name}
                    class:list={baseInputClasses}
                  >
                    {f.required && (
                      <option value="">{"Select an option"}</option>
                    )}
                    {f.inputOptions.map((o) => (
                      <option value={o}>{o}</option>
                    ))}
                  </select>
                );
              case "radio":
                return (
                  <fieldset>
                    <legend
                      class:list={[
                        "block",
                        {
                          "after:content-['*'] after:text-pink-500 after:-ml-0.5":
                            f.required,
                        },
                      ]}
                    >
                      {f.label}
                    </legend>
                    {f.inputOptions.map((o) => (
                      <div>
                        <input type="radio" id={o} name={o} value={o} />
                        <label for={o}>{o}</label>
                      </div>
                    ))}
                  </fieldset>
                );
              default:
                return (
                  <input
                    class:list={baseInputClasses}
                    type={f.type}
                    name={f.name}
                    id={f.name}
                  />
                );
            }
          }}
        </div>
      ))
    }
  </form>
</div>
