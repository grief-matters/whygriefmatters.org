---
import { getRouteFromDynamicResourcePageLink } from "@common/route";

import PortableTextContentBlock from "./typography/PortableTextContentBlock.astro";
import FeaturedResources from "./FeaturedResources.astro";
import TopicCollectionContentBlock from "./TopicCollectionContentBlock.astro";
import Heading from "./primitives/Heading.astro";
import EmphasizedEllipsisText from "./primitives/EmphasizedEllipsisText.astro";
import Link from "./primitives/Link.astro";
import CardLink from "./CardLink.astro";
import type { ContentGroup } from "@model/contentGroup";
import Container from "./primitives/Container.astro";
import ImageRow from "./ImageRow.astro";

interface Props {
  featuredContent: ContentGroup;
  indexInCollection?: number;
}

function getAdjustedIndex(arrLength: number, index: number) {
  let adjustedIndex = index % arrLength;

  if (adjustedIndex < 0) {
    adjustedIndex += arrLength;
  }

  return adjustedIndex;
}

const { featuredContent, indexInCollection = 0 } = Astro.props;

const bgClasses = ["bg-stone-50", "bg-stone-100"];

const adjustedIndex = getAdjustedIndex(bgClasses.length, indexInCollection);

const bgClass = bgClasses[adjustedIndex];

---

<section class:list={["py-4", bgClass]}>
  <div class:list={["container mx-auto"]}>
    {
      featuredContent.title && (
        <div class="mx-auto text-center mb-4 px-3">
          <Heading as="h2" size="xl3">
            <EmphasizedEllipsisText text={featuredContent.title} />
          </Heading>
        </div>
      )
    }

    {
      featuredContent.description && (
        <Container>
          <PortableTextContentBlock
            portableText={featuredContent.description}
          />
        </Container>
      )
    }
    {
      featuredContent.blocks.map((block) =>
        block.content.map((contentItem) => {
          switch (contentItem.contentType) {
            case "richTextContentBlock":
              return (
                <div class="max-w-prose px-3 my-6 m-auto prose font-serif text-center text-sky-800">
                  <PortableTextContentBlock portableText={contentItem.portableText} />
                </div>
              );

            case "rowOfThreeFeaturedResources":
              return (
                <div class="mb-3">
                  <FeaturedResources featuredResources={contentItem.resources} />
                </div>
              );

            case "rowOfThree":
              return (
                <div class:list={["mb-6 px-3"]}>
                  <ImageRow images={contentItem.images} />
                </div>
              );

            case "resourceLinks":
              return (
                <>
                  <div
                    class:list={["flex flex-wrap justify-center gap-4", "p-3"]}
                  >
                    {contentItem.resources.map((link) => (
                      <CardLink
                        href={link.url}
                        cardProps={{
                          resourceType: link.type ?? undefined
                        }}
                        external
                      >
                        {link.title}
                      </CardLink>
                    ))}
                  </div>
                </>
              );

            case "resourcePageLinks":
              return (
                <div
                  class:list={["max-w-4xl mx-auto flex", "flex-wrap", "justify-center", "gap-4"]}
                >
                  {contentItem.links.map((pageLink) => (
                    <CardLink 
                      href={pageLink.linkType === 'resourcePageLink' ? getRouteFromDynamicResourcePageLink(pageLink) : pageLink.url} 
                      cardProps={{resourceType: pageLink.linkType === 'resourcePageLink' ? pageLink.type : undefined}}
                    >
                      {pageLink.label}
                    </CardLink>
                  ))}
                </div>
              );

            case "topicCollectionContentBlockNew":
              return (
                <div class="mx-3">
                  <TopicCollectionContentBlock topics={contentItem.topics} />
                </div>
              );

            default:
              return <div>[[MISSING CONTENT TYPE]]</div>;
          }
        })
      )
    }
    {
      featuredContent.jumpLink &&
        (() => {
          switch (featuredContent.jumpLink?.jumpLinkType) {
            case "resourcePageLink":
              return (
                <div class="mx-auto text-center pt-6 pb-3">
                  <Link href={getRouteFromDynamicResourcePageLink(featuredContent.jumpLink)} size="xl">
                    <EmphasizedEllipsisText
                      text={featuredContent.jumpLink.label}
                    />
                  </Link>
                </div>
              );
            case "relative":
              return (
                <div class="mx-auto text-center pt-6 pb-3">
                  <Link href={`/${featuredContent.jumpLink.url}`} size="xl">
                    <EmphasizedEllipsisText
                      text={featuredContent.jumpLink.label}
                    />
                  </Link>
                </div>
              );
            default: 
              return (<></>)
          }
        })
    }
  </div>
</section>